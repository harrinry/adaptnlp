# Release Weekly Insider Builds to Docker and Releases
name: Test, Build, and Release AdaptNLP DockerHub Images

on: 
  workflow_dispatch: # Allow manual trigger
  release:
    types: [published]
    
jobs:
  test:
    runs-on: ubuntu-latest
    # We only verify ubuntu before push
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: 'x64'
        
    - name: Install the library
      run: |
        pip install nbdev jupyter
        pip install -e .[dev]
        
    - name: Read all notebooks, verify they are clean, and no diff nbs
      run: |
        nbdev_read_nbs
        echo "Check we are starting with clean git checkout"
        if [ -n "$(git status -uno -s)" ]; then echo "git status is not clean"; false; fi
        echo "Trying to strip out notebooks"
        nbdev_clean_nbs
        echo "Check that strip out was unnecessary"
        git status -s # display the status to see which nbs need cleaning up
        if [ -n "$(git status -uno -s)" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_git_hooks"; false; fi
        if [ -n "$(nbdev_diff_nbs)" ]; then echo -e "!!! Detected difference between the notebooks and the library"; false; fi
        
    - name: Run tests
      run: |
        nbdev_test_nbs
    
  release-dev:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.ref == 'refs/heads/dev'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
        
    - name: Get version and image name
      id: get_variables
      run: |
        from configparser import ConfigParser
        import os
        from pathlib import Path
        config = ConfigParser()
        settings = Path('settings.ini')
        assert settings.exists(), 'Not able to read or download settings.ini file'
        config.read(settings)
        cfg = config['DEFAULT']
        print(f"::set-output name=version::{cfg['version']}")
        print(f"::set-output name=image_name::{cfg['lib_name']}")
      shell: python
      
    - name: Build and Tag Container
      run: |
        export DOCKER_BUILDKIT=1
        docker build --build-arg BUILD=dev \
          -t ${IMAGE_NAME}:$(date +%F) \
          -f docker/Dockerfile .
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Push Images
      run: |
        echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin
        docker push ${IMAGE_NAME}
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
  
  release-version:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.ref = 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
        
    - name: Get version and image name
      id: get_variables
      run: |
        from configparser import ConfigParser
        import os
        from pathlib import Path
        config = ConfigParser()
        settings = Path('settings.ini')
        assert settings.exists(), 'Not able to read or download settings.ini file'
        config.read(settings)
        cfg = config['DEFAULT']
        print(f"::set-output name=version::{cfg['version']}")
        print(f"::set-output name=image_name::{cfg['lib_name']}")
      shell: python
      
    - name: Build and Tag Container
      run: |
        export DOCKER_BUILDKIT=1
        docker build --build-arg BUILD=prod \
          -t ${IMAGE_NAME}:latest \
          -t ${IMAGE_NAME}:${VERSION} \
          -f docker/Dockerfile .
      env:
        VERSION: ${{ steps.get_variables.outputs.version }}
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Push Images
      run: |
        echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin
        docker push ${IMAGE_NAME}
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
