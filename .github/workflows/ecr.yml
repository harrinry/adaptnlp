on:
  release:
    types: [published]
  workflow_dispatch: # Trigger manually

name: Build and Push Docker Images to ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ecr_push_env

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Get version and image name
      id: get_variables
      run: |
        from configparser import ConfigParser
        import os
        from pathlib import Path
        config = ConfigParser()
        settings = Path('settings.ini')
        assert settings.exists(), 'Not able to read or download settings.ini file'
        config.read(settings)
        cfg = config['DEFAULT']
        print(f"::set-output name=version::{cfg['version']}")
        print(f"::set-output name=image_name::{cfg['lib_name']}")
      shell: python

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, Tag, and Push Public Images to Amazon ECR
      run: |
        # Build Docker Container and Push to ECR
        export DOCKER_BUILDKIT=1
        
        docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest
          -f docker/Dockerfile .
          
        docker push $ECR_REGISTRY/$ECR_REPOSITORY
      
      env:
        ECR_REGISTRY: 109004554389.dkr.ecr.us-east-1.amazonaws.com
        ECR_REGISTRY_PUB: public.ecr.aws/r6j8a8p4
        ECR_REPOSITORY: ${{ steps.get_variables.outputs.image_name }}
        IMAGE_TAG: ${{ steps.get_variables.outputs.version }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Build, Tag, and Push Private Images to Amazon ECR
      run: |
        # Build a docker container and push it to ECR
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY_PUB
        
        docker build \
          -t $ECR_REGISTRY_PUB/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY_PUB/$ECR_REPOSITORY:latest
          -f docker/Dockerfile .
          
        docker push $ECR_REGISTRY_PUB/$ECR_REPOSITORY
        
        declare -a API_TYPES=("question-answering" "sequence-classification" "summarization" "text-generation" "token-tagging" "translation")
        
        # Iterate and Push
        for type in ${API_TYPES[@]}; do
          docker build \
           -t $ECR_REGISTRY_PUB/$ECR_REPOSITORY:latest-api-$type \
           -t $ECR_REGISTRY_PUB/$ECR_REPOSITORY:${VERSION}-api-$type \
           -f rest/$type/Dockerfile rest/$type
           
          docker push novetta/adaptnlp:latest-api-$type
          docker push novetta/adaptnlp:${VERSION}-api-$type
        done
      env:
        ECR_REGISTRY: 109004554389.dkr.ecr.us-east-1.amazonaws.com
        ECR_REGISTRY_PUB: public.ecr.aws/r6j8a8p4
        ECR_REPOSITORY: ${{ steps.get_variables.outputs.image_name }}
        IMAGE_TAG: ${{ steps.get_variables.outputs.version }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
