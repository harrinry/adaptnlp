# Release Weekly Insider Builds to Docker and Releases
name: Test, Build, and Release AdaptNLP DockerHub API Images

on: 
  workflow_dispatch: # Allow manual trigger
    
jobs:
  test:
    runs-on: ubuntu-latest
    # We only verify ubuntu before push
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: 'x64'
        
    - name: Install the library
      run: |
        pip install nbdev jupyter
        pip install -e .[dev]
        
    - name: Read all notebooks, verify they are clean, and no diff nbs
      run: |
        nbdev_read_nbs
        echo "Check we are starting with clean git checkout"
        if [ -n "$(git status -uno -s)" ]; then echo "git status is not clean"; false; fi
        echo "Trying to strip out notebooks"
        nbdev_clean_nbs
        echo "Check that strip out was unnecessary"
        git status -s # display the status to see which nbs need cleaning up
        if [ -n "$(git status -uno -s)" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_git_hooks"; false; fi
        if [ -n "$(nbdev_diff_nbs)" ]; then echo -e "!!! Detected difference between the notebooks and the library"; false; fi
        
    - name: Run tests
      run: |
        nbdev_test_nbs    
        
  sequence-classification:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
        
    - name: Get version and image name
      id: get_variables
      run: |
        from configparser import ConfigParser
        import os
        from pathlib import Path
        config = ConfigParser()
        settings = Path('settings.ini')
        assert settings.exists(), 'Not able to read or download settings.ini file'
        config.read(settings)
        cfg = config['DEFAULT']
        print(f"::set-output name=version::{cfg['version']}")
        print(f"::set-output name=image_name::{cfg['lib_name']}")
      shell: python
    
    - name: Setup env
      run: |
        export DOCKER_BUILDKIT=1
        docker pull ${IMAGE_NAME}:latest || true
        cd rest
      
    - name: Build and Tag Container Question Answering
      run: |
        cd question-answering
        docker build -t novetta/adaptnlp:latest-api-question-answering \
        -t novetta/adaptnlp:${VERSION}-api-question-answering \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
      
    - name: Build and Tag Container Sequence Classification
      run: |
        cd sequence-classification
        docker build -t novetta/adaptnlp:latest-api-sequence-classification \
        -t novetta/adaptnlp:${VERSION}-api-sequence-classification \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
      
    - name: Summarization
      run: |
        cd summarization
        docker build -t novetta/adaptnlp:latest-api-summarization \
        -t novetta/adaptnlp:${VERSION}-api-summarization \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Text Generation
      run: |
        cd text-generation
        docker build -t novetta/adaptnlp:latest-api-text-generation \
        -t novetta/adaptnlp:${VERSION}-api-text-generation \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Token Tagging
      run: |
        cd token-tagging
        docker build -t novetta/adaptnlp:latest-api-token-tagging \
        -t novetta/adaptnlp:${VERSION}-api-token-tagging \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Translation
      run: |
        cd rest/translation
        docker build -t novetta/adaptnlp:latest-api-translation \
        -t novetta/adaptnlp:${VERSION}-api-translation \
        -f Dockerfile .
        cd ..
      env:
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        
    - name: Push Images
      run: |
        echo ${PASSWORD} | docker login -u $USERNAME --password-stdin
        docker push --all-tags novetta/adaptnlp
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
        IMAGE_NAME: ${{ steps.get_variables.outputs.image_name }}
        VERSION: ${{ steps.get_variables.outputs.version }}
