on:
  release:
    types: [published]
  workflow_dispatch: # Trigger manually

name: Build and Push Docker Images to ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ecr_push_env

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Get version and image name
      id: get_variables
      run: |
        from configparser import ConfigParser
        import os
        from pathlib import Path
        config = ConfigParser()
        settings = Path('settings.ini')
        assert settings.exists(), 'Not able to read or download settings.ini file'
        config.read(settings)
        cfg = config['DEFAULT']
        print(f"::set-output name=version::{cfg['version']}")
        print(f"::set-output name=image_name::{cfg['libname']}")
      shell: python

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: 109004554389.dkr.ecr.us-east-1.amazonaws.com
#         ECR_REGISTRY_PUB: public.ecr.aws/r6j8a8p4
#         ECR_REPOSITORY: ${{ steps.get_variables.outputs.image_name }}
#         IMAGE_TAG: ${{ version }}
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#       run: |
#         # Build a docker container and push it to ECR
#         echo "$ECR_REGISTRY, $ECR_REPOSITORY, $IMAGE_TAG, $ECR_REGISTRY_PUB"
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         echo "Pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#         aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY_PUB
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY_PUB/$ECR_REPOSITORY:$IMAGE_TAG
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY_PUB/$ECR_REPOSITORY:latest
#         docker push $ECR_REGISTRY_PUB/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY_PUB/$ECR_REPOSITORY:latest
#         echo "Pushed to $ECR_REGISTRY_PUB/$ECR_REPOSITORY:$IMAGE_TAG"
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: New Image Names and URLs
      env:
        IMAGE_TAG: ${{ steps.get_variables.outputs.version }}
        ECR_REPOSITORY: ${{ steps.get_variables.outputs.image_name }}
        ECR_REGISTRY_PUB: public.ecr.aws/r6j8a8p4
      run: |
        echo "New Images Released for $ECR_REPOSITORY with version $IMAGE_TAG to ECR Hubs:"
        echo "---"
        echo "$ECR_REGISTRY:"
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:latest"
        echo "---"
        echo "$ECR_REGISTRY_PUB:"
        echo "$ECR_REGISTRY_PUB/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "$ECR_REGISTRY_PUB/$ECR_REPOSITORY:latest"
